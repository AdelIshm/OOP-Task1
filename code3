class Student:
    def __init__(self, name, surname, gender):
        self.name = name
        self.surname = surname
        self.gender = gender
        self.finished_courses = []
        self.courses_in_progress = []
        self.grades = {}
    
    def __str__(self):
        avg_grade = self._calculate_avg_grade()
        courses_in_progress = ', '.join(self.courses_in_progress)
        finished_courses = ', '.join(self.finished_courses)
        return (f"Имя: {self.name}\n"
                f"Фамилия: {self.surname}\n"
                f"Средняя оценка за домашние задания: {avg_grade:.1f}\n"
                f"Курсы в процессе изучения: {courses_in_progress}\n"
                f"Завершенные курсы: {finished_courses}")
    
    def _calculate_avg_grade(self):
        total_grades = 0
        count = 0
        for course_grades in self.grades.values():
            total_grades += sum(course_grades)
            count += len(course_grades)
        return total_grades / count if count > 0 else 0
    
    def __lt__(self, other):
        if not isinstance(other, Student):
            return NotImplemented
        return self._calculate_avg_grade() < other._calculate_avg_grade()
    
    def __gt__(self, other):
        if not isinstance(other, Student):
            return NotImplemented
        return self._calculate_avg_grade() > other._calculate_avg_grade()
    
    def __eq__(self, other):
        if not isinstance(other, Student):
            return NotImplemented
        return self._calculate_avg_grade() == other._calculate_avg_grade()


class Mentor:
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        self.courses_attached = []
    
    def __str__(self):
        return (f"Имя: {self.name}\n"
                f"Фамилия: {self.surname}")


class Lecturer(Mentor):
    def __init__(self, name, surname):
        super().__init__(name, surname)
        self.lecture_grades = {}
    
    def __str__(self):
        avg_grade = self._calculate_avg_lecture_grade()
        return (f"Имя: {self.name}\n"
                f"Фамилия: {self.surname}\n"
                f"Средняя оценка за лекции: {avg_grade:.1f}")
    
    def _calculate_avg_lecture_grade(self):
        if not self.lecture_grades:
            return 0
        all_grades = []
        for grades in self.lecture_grades.values():
            all_grades.extend(grades)
        return sum(all_grades) / len(all_grades) if all_grades else 0
    
    def __lt__(self, other):
        if not isinstance(other, Lecturer):
            return NotImplemented
        return self._calculate_avg_lecture_grade() < other._calculate_avg_lecture_grade()
    
    def __gt__(self, other):
        if not isinstance(other, Lecturer):
            return NotImplemented
        return self._calculate_avg_lecture_grade() > other._calculate_avg_lecture_grade()
    
    def __eq__(self, other):
        if not isinstance(other, Lecturer):
            return NotImplemented
        return self._calculate_avg_lecture_grade() == other._calculate_avg_lecture_grade()


class Reviewer(Mentor):
    def rate_hw(self, student, course, grade):
        if isinstance(student, Student) and course in self.courses_attached and course in student.courses_in_progress:
            if course in student.grades:
                student.grades[course] += [grade]
            else:
                student.grades[course] = [grade]
        else:
            return 'Ошибка'


best_student = Student('Ruoy', 'Eman', 'your_gender')
best_student.courses_in_progress += ['Python']
best_student.finished_courses += ['Введение в программирование']

cool_mentor = Mentor('Some', 'Buddy')
print(cool_mentor)

cool_lecturer = Lecturer('Some', 'Buddy')
cool_lecturer.lecture_grades = {'Python': [9, 10, 9.8]}
print(cool_lecturer)

cool_reviewer = Reviewer('Some', 'Buddy')
print(cool_reviewer)

cool_reviewer.courses_attached += ['Python']
cool_reviewer.rate_hw(best_student, 'Python', 10)
cool_reviewer.rate_hw(best_student, 'Python', 10)
cool_reviewer.rate_hw(best_student, 'Python', 10)

print(best_student)

student1 = Student('Alice', 'Smith', 'female')
student1.grades = {'Python': [9, 9, 10]}
student2 = Student('Bob', 'Johnson', 'male')
student2.grades = {'Python': [8, 8, 9]}

print(student1 > student2)  

lecturer1 = Lecturer('John', 'Doe')
lecturer1.lecture_grades = {'Python': [9, 9, 10]}
lecturer2 = Lecturer('Jane', 'Smith')
lecturer2.lecture_grades = {'Python': [8, 8, 9]}

print(lecturer1 > lecturer2)  
